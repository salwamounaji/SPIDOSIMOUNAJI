import * as tslib_1 from '../polyfills/tslib.js';
/*! Built with http://stenciljs.com */
import { h } from '../stencilrouter.core.js';
import { a as matchPath, b as matchesAreEqual } from './chunk-fea4bd05.js';
import { b as ActiveRouter } from './chunk-30abd2e3.js';
import './chunk-cd950d93.js';
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var Route = /** @class */ (function () {
    function Route() {
        this.group = null;
        this.match = null;
        this.componentProps = {};
        this.exact = false;
        this.scrollOnNextRender = false;
        this.previousMatch = null;
    }
    Route.prototype.computeMatch = function (newLocation) {
        var isGrouped = this.group != null || (this.el.parentElement != null && this.el.parentElement.tagName.toLowerCase() === 'stencil-route-switch');
        if (!newLocation || isGrouped) {
            return;
        }
        this.previousMatch = this.match;
        return this.match = matchPath(newLocation.pathname, {
            path: this.url,
            exact: this.exact,
            strict: true
        });
    };
    Route.prototype.loadCompleted = function () {
        return __awaiter(this, void 0, void 0, function () {
            var routeViewOptions;
            return tslib_1.__generator(this, function (_a) {
                routeViewOptions = {};
                if (this.history && this.history.location.hash) {
                    routeViewOptions = {
                        scrollToId: this.history.location.hash.substr(1)
                    };
                }
                else if (this.scrollTopOffset) {
                    routeViewOptions = {
                        scrollTopOffset: this.scrollTopOffset
                    };
                }
                if (typeof this.componentUpdated === 'function') {
                    this.componentUpdated(routeViewOptions);
                }
                else if (this.match && !matchesAreEqual(this.match, this.previousMatch) && this.routeViewsUpdated) {
                    this.routeViewsUpdated(routeViewOptions);
                }
                return [2 /*return*/];
            });
        });
    };
    Route.prototype.componentDidUpdate = function () {
        return __awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadCompleted()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Route.prototype.componentDidLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadCompleted()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Route.prototype.render = function () {
        if (!this.match || !this.history) {
            return null;
        }
        var childProps = Object.assign({}, this.componentProps, { history: this.history, match: this.match });
        if (this.routeRender) {
            return this.routeRender(Object.assign({}, childProps, { component: this.component }));
        }
        if (this.component) {
            var ChildComponent = this.component;
            return (h(ChildComponent, Object.assign({}, childProps)));
        }
    };
    Object.defineProperty(Route, "is", {
        get: function () { return "stencil-route"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Route, "properties", {
        get: function () {
            return {
                "component": {
                    "type": String,
                    "attr": "component"
                },
                "componentProps": {
                    "type": "Any",
                    "attr": "component-props"
                },
                "componentUpdated": {
                    "type": "Any",
                    "attr": "component-updated"
                },
                "el": {
                    "elementRef": true
                },
                "exact": {
                    "type": Boolean,
                    "attr": "exact"
                },
                "group": {
                    "type": String,
                    "attr": "group",
                    "reflectToAttr": true
                },
                "history": {
                    "type": "Any",
                    "attr": "history"
                },
                "historyType": {
                    "type": String,
                    "attr": "history-type"
                },
                "location": {
                    "type": "Any",
                    "attr": "location",
                    "watchCallbacks": ["computeMatch"]
                },
                "match": {
                    "type": "Any",
                    "attr": "match",
                    "mutable": true
                },
                "routeRender": {
                    "type": "Any",
                    "attr": "route-render"
                },
                "routeViewsUpdated": {
                    "type": "Any",
                    "attr": "route-views-updated"
                },
                "scrollTopOffset": {
                    "type": Number,
                    "attr": "scroll-top-offset"
                },
                "url": {
                    "type": String,
                    "attr": "url"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Route, "style", {
        get: function () { return "stencil-route.inactive{display:none}"; },
        enumerable: true,
        configurable: true
    });
    return Route;
}());
ActiveRouter.injectProps(Route, [
    'location',
    'history',
    'historyType',
    'routeViewsUpdated'
]);
export { Route as StencilRoute };
