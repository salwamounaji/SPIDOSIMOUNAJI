import * as tslib_1 from '../polyfills/tslib.js';
/*! Built with http://stenciljs.com */
import { h } from '../stencilrouter.core.js';
import { b as ActiveRouter } from './chunk-30abd2e3.js';
import { a as matchPath } from './chunk-fea4bd05.js';
import './chunk-cd950d93.js';
function uuidv4() {
    return ([1e7].toString() + -1e3.toString() + -4e3.toString() + -8e3.toString() + -1e11.toString()).replace(/[018]/g, function (c) {
        var random = window.crypto.getRandomValues(new Uint8Array(1));
        return (c ^ random[0] & 15 >> c / 4).toString(16);
    });
}
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getUniqueId() {
    if (window.crypto) {
        return uuidv4();
    }
    return ((Math.random() * 10e16).toString().match(/.{4}/g) || []).join('-');
}
function getMatch(pathname, url, exact) {
    return matchPath(pathname, {
        path: url,
        exact: exact,
        strict: true
    });
}
function isHTMLStencilRouteElement(element) {
    return element.tagName.toLowerCase() === 'stencil-route';
}
var RouteSwitch = /** @class */ (function () {
    function RouteSwitch() {
        this.group = getUniqueId();
        this.subscribers = [];
    }
    RouteSwitch.prototype.componentWillLoad = function () {
        if (this.location != null) {
            this.regenerateSubscribers(this.location);
        }
    };
    RouteSwitch.prototype.regenerateSubscribers = function (newLocation) {
        return __awaiter(this, void 0, void 0, function () {
            var newActiveIndex, activeChild;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (newLocation == null) {
                    return [2 /*return*/];
                }
                newActiveIndex = -1;
                this.subscribers = Array.prototype.slice.call(this.el.children)
                    .filter(isHTMLStencilRouteElement)
                    .map(function (childElement, index) {
                    var match = getMatch(newLocation.pathname, childElement.url, childElement.exact);
                    if (match && newActiveIndex === -1) {
                        newActiveIndex = index;
                    }
                    return {
                        el: childElement,
                        match: match
                    };
                });
                if (newActiveIndex === -1) {
                    return [2 /*return*/];
                }
                if (this.activeIndex === newActiveIndex) {
                    this.subscribers[newActiveIndex].el.match = this.subscribers[newActiveIndex].match;
                    return [2 /*return*/];
                }
                this.activeIndex = newActiveIndex;
                activeChild = this.subscribers[this.activeIndex];
                if (this.scrollTopOffset) {
                    activeChild.el.scrollTopOffset = this.scrollTopOffset;
                }
                activeChild.el.group = this.group;
                activeChild.el.match = activeChild.match;
                activeChild.el.componentUpdated = function (routeViewUpdatedOptions) {
                    _this.queue.write(function () {
                        _this.subscribers.forEach(function (child, index) {
                            child.el.componentUpdated = undefined;
                            if (index === _this.activeIndex) {
                                return child.el.style.display = '';
                            }
                            if (_this.scrollTopOffset) {
                                child.el.scrollTopOffset = _this.scrollTopOffset;
                            }
                            child.el.group = _this.group;
                            child.el.match = null;
                            child.el.style.display = 'none';
                        });
                    });
                    if (_this.routeViewsUpdated) {
                        _this.routeViewsUpdated(Object.assign({ scrollTopOffset: _this.scrollTopOffset }, routeViewUpdatedOptions));
                    }
                };
                return [2 /*return*/];
            });
        });
    };
    RouteSwitch.prototype.render = function () {
        return (h("slot", null));
    };
    Object.defineProperty(RouteSwitch, "is", {
        get: function () { return "stencil-route-switch"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouteSwitch, "properties", {
        get: function () {
            return {
                "el": {
                    "elementRef": true
                },
                "group": {
                    "type": String,
                    "attr": "group",
                    "reflectToAttr": true
                },
                "location": {
                    "type": "Any",
                    "attr": "location",
                    "watchCallbacks": ["regenerateSubscribers"]
                },
                "queue": {
                    "context": "queue"
                },
                "routeViewsUpdated": {
                    "type": "Any",
                    "attr": "route-views-updated"
                },
                "scrollTopOffset": {
                    "type": Number,
                    "attr": "scroll-top-offset"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    return RouteSwitch;
}());
ActiveRouter.injectProps(RouteSwitch, [
    'location',
    'routeViewsUpdated'
]);
export { RouteSwitch as StencilRouteSwitch };
